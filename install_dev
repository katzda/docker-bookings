#!/bin/bash

#set default values
INSTALL_DIR=$HOME/sambashare
CONFIGURE_SAMBA_FORCE=false
HELP_TEXT=' -d <path> default is $INSTALL_DIR because that is how samba is configured automatically by this script\n
-h Show this help text\n
-s Display Samba configuration instructions for windows. This is done automatically if samba was just installed by this script'
#parse the passed parameters
while getopts d:s:h: option
do
    case "${option}"
    in
        d) INSTALL_DIR=${OPTARG};;
        h) echo -e $HELP_TEXT;;
        s) CONFIGURE_SAMBA_FORCE=true;;
    esac
done

docker --version &>/dev/null
if [[ $? -eq 127 ]] ; then
    #Error 127 means 'command not found'
    echo "Installing DOCKER"
    sudo apt-get update
    sudo apt install docker.io -y
    sudo groupadd docker
    sudo usermod -aG docker $USER
    sudo systemctl start docker
    sudo chown "$USER":"$USER" /home/"$USER"/.docker -R
    sudo chmod g+rwx "$HOME/.docker" -R
    echo "Because we had to install docker, we needed to logout and log in so we can run docker commands as a docker user."
    echo "Please log out and log in"
    exit
else
    echo "Docker is already installed"
fi

echo "Detecting if docker service is running:"
if [[ "$(sudo systemctl is-active docker.service)" == "active" ]] ; then
    echo "Detecting if docker service is running: Success"
else
    echo "Detecting if docker service is running: Unable to detect (does it need a manual fix?)"
fi

#detecting if samba is installed
dpkg -s samba &>/dev/null
if [[ $? -ne 0 ]] ; then
    CONFIGURE_SAMBA=true
    echo "Installing Samba"
    sudo apt-get update
    sudo apt install samba -y
    mkdir $INSTALL_DIR

    sudo chmod 777 /etc/samba/smb.conf
    sudo echo "[sambashare]
    comment = Samba on Ubuntu
    path = $INSTALL_DIR
    read only = no
    browsable = yes" >> /etc/samba/smb.conf
    sudo chmod 644 /etc/samba/smb.conf

    sudo service smbd restart
    sudo ufw allow samba

    echo "Configuring SAMBA user; Please enter password for user '$USER':"
    sudo smbpasswd -a $USER

else
    CONFIGURE_SAMBA=false
    echo "Samba is already installed"
fi

InstructionsSamba(){
    echo " - Now in Windows in This PC, click 'Map network drive' and paste the following address (or if this is not the correct one, it simply needs to be the IP of this linux machine):"
    adds=$(hostname -I)
    for add in $adds; do echo "\\\\$add\sambashare"; break; done
    echo " - Check 'Connect using different credentials'"
    echo " - Make sure you use the '$USER' account and the password you used during configuration of Samba user."
    echo " - Click OK"
}

#check if a new volume should be created
if [ -z $(docker volume ls -q) ]
then
    echo "Creating 'excalivol' volume"
    docker volume create excalivol
else
    echo "Volume 'excalivol' already exists"
fi

#check if a new network should be created
if [ -z $(docker network ls -f name=bookingsnet -q) ]
then
    echo "Creating 'bookingsnet' network"
    docker network create bookingsnet
else
    echo "Network 'bookingsnet' already exists"
fi

#check if 'excalihost' database should be created
if [ -z $(docker ps -f name=excalihost -q) ]
then
    echo "Creating 'excalihost' postgres server with 'excalibur' database"
    docker run \
    --rm \
    --name excalihost \
    -e POSTGRES_PASSWORD=postgres \
    -e POSTGRES_DB=excalibur \
    -d \
    -p 5432:5432 \
    -v excalivol:/var/lib/postgresql/data \
    --network=bookingsnet \
    postgres
else
    echo "Postgres server 'excalihost' already running"
fi

#create host server
docker build -t katzda/bookings:latest -f ./Dockerfile .

#clean up: stopping previous container
containers_string=$(docker ps -f name=bookings -q)
if [ ${#containers_string} -gt 0 ]
then
    echo "REMOVING 'bookings' CONTAINER:"
    docker rm -f $containers_string
else
    echo "NO RUNNING bookings NEEDS STOPPING"
fi

containers_string=$(docker ps -f "status=exited" -q)
if [ ${#containers_string} -gt 0 ]
then
    IFS=' ' read -a containers <<< $containers_string
    echo "REMOVING ${#containers[@]} CONTAINER(S)):"
    docker rm $containers_string
else
    echo "Containers don't need to be cleaned up."
fi

#clean up: dangling images
images_string=$(docker images -f "dangling=true" -q)
if [ ${#images_string} -gt 0 ]
then
    IFS=' ' read -a images <<< $images_string
    echo "REMOVING ${#images[@]} IMAGE(S):"
    docker rmi -f $images_string
else
    echo "Images don't need to be cleaned up."
fi

#Securing connection to git without prompting
github=$(grep -r -e "Host github.com" ~/.ssh/ 2>/dev/null)
if [ ! ${#github} -gt 0 ] ; then
    if [[ ! -d ~/.ssh ]] ; then
        mkdir ~/.ssh
    fi

    echo "Host github.com
        Hostname github.com
        User katzda
        IdentityFile ~/.ssh/bookings_rsa.pub
        StrictHostKeyChecking no
        Port 22" > ~/.ssh/config
else
    echo "'Host github.com' entry in ~/.ssh/config is already set up"
fi

GitCloneRepo(){
    if ! (git clone -b develop git@github.com:katzda/booking-system.git) then
        return 1
    else
        return 0
    fi
}

REPO_DIR="$INSTALL_DIR/booking-system/"
CreateBookingsContainer(){
    #setup the repo
    echo "Creating katzda/bookings:latest container"
    docker run -v $REPO_DIR:/home/developer/booking-system \
            --rm \
            -d \
            --name bookings \
            -p 8080:80 \
            --network=bookingsnet \
            katzda/bookings:latest
}

PrintPublicKeyInfo(){
    echo "Did you register this PUBLIC KEY in your repo?"
    cat ~/.ssh/bookings_rsa.pub
    echo "Then execute this file again or resolve whatever issue manually"
}

cd $INSTALL_DIR
HAD_ENV_EXISTED=false
if [ ! -d "$REPO_DIR/.git" ] ; then
    #Do the cloning
    if ! GitCloneRepo ; then
        echo "Cloning failed!"

        #it is possible that we have never generated ssh keys
        cd ~/.ssh/
        RSA=$(ls ~/.ssh | grep bookings_rsa)
        if [ ${#RSA} -eq 0 ] ; then
            sudo chmod 755 ~/.ssh
            echo "GENERATING ssh PRIVATE KEY and PUBLIC LOCK"
            ssh-keygen -t rsa -b 4096 -C "${USER}_bookings_github_repo" -P "" -f bookings_rsa
            eval $(ssh-agent -s)
            chmod 400 ~/.ssh/bookings_rsa.pub
            chmod 400 ~/.ssh/bookings_rsa
            ssh-add ~/.ssh/bookings_rsa
            PrintPublicKeyInfo
        else
            echo "PRIVATE KEY and PUBLIC LOCK already exist"
            echo "Executing ssh verbose connection test:"
            ssh -vT katzda@github.com

            echo "Trying to clone again:"
            if ! GitCloneRepo ; then
                echo "Unsuccessful."
                PrintPublicKeyInfo
            fi
        fi
    else
        echo "Repo cloning was successful"
        CreateBookingsContainer
    fi
else
    HAD_ENV_EXISTED=true
    echo "Repo is already cloned"
    CreateBookingsContainer
fi

#Print instructions for samba
if [[ "$CONFIGURE_SAMBA" = true ]] || [[ "$CONFIGURE_SAMBA_FORCE" = true ]]; then
    InstructionsSamba
fi
