#!/bin/bash

#set default values
INSTALL_DIR=$HOME

#parse the passed parameters
while getopts d: option
do
    case "${option}"
    in
        d) INSTALL_DIR=${OPTARG};;
    esac
done

docker --version >/dev/null
if [[ $? -eq 127 ]] ; then
    #Error 127 means 'command not found'
    echo "Installing DOCKER"
    sudo apt-get update
    sudo apt install docker.io -y
    sudo systemctl start docker
else
    echo "Docker is already installed"
fi

echo "Detecting if docker service is running:"
if [[ "$(sudo systemctl is-active docker.service)" == "active" ]] ; then
    echo "Detecting if docker service is running: Success"
else
    echo "Detecting if docker service is running: Unable to detect (does it need a manual fix?)"
fi

#check if a new volume should be created
if [ -z $(docker volume ls -q) ]
then
    echo "Creating 'excalivol' volume"
    docker volume create excalivol
else
    echo "Volume 'excalivol' already exists"
fi

#check if a new network should be created
if [ -z $(docker network ls -f name=bookingsnet -q) ]
then
    echo "Creating 'bookingsnet' network"
    docker network create bookingsnet
else
    echo "Network 'bookingsnet' already exists"
fi

#check if 'excalihost' database should be created
if [ -z $(docker ps -f name=excalihost -q) ]
then
    echo "Creating 'excalihost' postgres server with 'excalibur' database"
    docker run \
    --rm \
    --name excalihost \
    -e POSTGRES_PASSWORD=postgres \
    -e POSTGRES_DB=excalibur \
    -d \
    -p 5432:5432 \
    -v excalivol:/var/lib/postgresql/data \
    --network=bookingsnet \
    postgres
else
    echo "Postgres server 'excalihost' already running"
fi

#create host server
docker build -t katzda/bookings:latest -f ./Dockerfile .

#clean up: stopping previous container
containers_string=$(docker ps -f name=bookings -q)
if [ ${#containers_string} -gt 0 ]
then
    echo "REMOVING 'bookings' CONTAINER:"
    docker rm -f $containers_string
else
    echo "NO RUNNING bookings NEEDS STOPPING"
fi

containers_string=$(docker ps -f "status=exited" -q)
if [ ${#containers_string} -gt 0 ]
then
    IFS=' ' read -a containers <<< $containers_string
    echo "REMOVING ${#containers[@]} CONTAINER(S)):"
    docker rm $containers_string
else
    echo "Containers don't need to be cleaned up."
fi

#clean up: dangling images
images_string=$(docker images -f "dangling=true" -q)
if [ ${#images_string} -gt 0 ]
then
    IFS=' ' read -a images <<< $images_string
    echo "REMOVING ${#images[@]} IMAGE(S):"
    docker rmi -f $images_string
else
    echo "Images don't need to be cleaned up."
fi

#Securing connection to git without prompting
github=$(grep -r -e "Host github.com" ~/.ssh/)
if [ ! ${#github} -gt 0 ]
then
echo "Host github.com
    Hostname ssh.github.com
    StrictHostKeyChecking no
    Port 89875" >> ~/.ssh/config
else
    echo "'Host github.com' entry in ~/.ssh/config is already set up"
fi

GitCloneRepo(){
    # previous (git clone -b develop git@github.com:katzda/booking-system.git)
    return [ git clone ssh://git@github.com:89875/katzda/booking-system.git ]
}

REPO_DIR="$INSTALL_DIR/booking-system/"
cd $INSTALL_DIR
HAD_ENV_EXISTED=false
if [ ! -d "$REPO_DIR/.git" ] ; then
    #Do the cloning
    if ! GitCloneRepo ; then
        echo "Cloning failed!"

        #it is possible that we have never generated ssh keys
        cd ~/.ssh/
        RSA=$(ls ~/.ssh | grep bookings_rsa)
        if [ ${#RSA} -eq 0 ] ; then
            sudo chmod 755 ~/.ssh
            echo "GENERATING ssh PRIVATE KEY and PUBLIC LOCK"
            ssh-keygen -t rsa -b 4096 -C "${USER}_bookings_github_repo" -P "" -f bookings_rsa
            eval $(ssh-agent -s)
            ssh-add ~/.ssh/bookings_rsa
        else
            echo "PRIVATE KEY and PUBLIC LOCK already exist"
            echo "Executing ssh verbose connection test:"
            ssh -vT katzda@github.com

            echo "Trying to clone again:"
            if ! GitCloneRepo ; then
                echo "Unsuccessful. Did you register this PUBLIC KEY in your repo:"
                cat ~/.ssh/bookings_rsa.pub
                echo "Then execute this file again or resolve whatever issue manually"
                exit
            fi
        fi
    fi
else
    HAD_ENV_EXISTED=true
    echo "booking-system exists"
fi

#setup the repo
echo "Creating katzda/bookings:latest container"
docker run -v $REPO_DIR:/home/developer/booking-system \
           --rm \
           -d \
           --name bookings \
           -p 8080:80 \
           --network=bookingsnet \
           katzda/bookings:latest