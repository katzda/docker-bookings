#!/bin/bash
. ./configs.sh
INSTALL_DIR=$HOME/$SAMBA_SHARE_DIRECTORY
FRESH=false
HELP_TEXT="-h Help text\n
-f Fresh\n"

while getopts h-:f-: option
do
    case "${option}"
    in
        h) echo -e $HELP_TEXT; exit;;
        f) FRESH=true;;
    esac
done

#check if a new volume should be created
if [ -z $(docker volume ls -q) ]
then
    echo "Creating 'excalivol' volume"
    docker volume create excalivol
else
    echo "Volume 'excalivol' already exists"
fi

#check if a new network should be created
if [ -z $(docker network ls -f name=bookingsnet -q) ]
then
    echo "Creating 'bookingsnet' network"
    docker network create bookingsnet
else
    echo "Network 'bookingsnet' already exists"
fi

#check if 'excalihost' database should be created
#todo
# warn or skip deleting database if given different db name or container name or user name or password or fresh flag
if [ -z $(docker ps -f name=excalihost -q) ]
then
    if [ ${#DB_USER_PASSWORD} -eq 0 ]; then
        echo "To create a DB, set a password in the configs.sh"
        exit
    fi
    echo "Creating '$DB_CONTAINER_NAME' postgres server with '$DB_NAME' database"
    docker run \
    --rm \
    -d \
    --name $DB_CONTAINER_NAME \
    -v excalivol:/var/lib/postgresql/data \
    -p $DB_PORT:$DB_PORT \
    -e POSTGRES_USER=$DB_USER_NAME \
    -e POSTGRES_PASSWORD=$DB_USER_PASSWORD \
    -e POSTGRES_DB=$DB_NAME \
    --network=bookingsnet \
    postgres
else
    echo "Postgres server 'excalihost' already running"
fi

#create host server
docker build -t katzda/bookings:latest -f ./Dockerfile .

#clean up: stopping previous container
containers_string=$(docker ps -f name=bookings -q)
if [ ${#containers_string} -gt 0 ]
then
    echo "REMOVING 'bookings' CONTAINER:"
    docker rm -f $containers_string
else
    echo "NO RUNNING bookings NEEDS STOPPING"
fi

#clean up: stopped containers
containers_string=$(docker ps -f "status=exited" -q)
if [ ${#containers_string} -gt 0 ]
then
    IFS=' ' read -a containers <<< $containers_string
    echo "REMOVING ${#containers[@]} CONTAINER(S)):"
    docker rm $containers_string
else
    echo "Containers don't need to be cleaned up."
fi

#clean up: dangling images
images_string=$(docker images -f "dangling=true" -q)
if [ ${#images_string} -gt 0 ]
then
    IFS=' ' read -a images <<< $images_string
    echo "REMOVING ${#images[@]} IMAGE(S):"
    docker rmi -f $images_string
else
    echo "Images don't need to be cleaned up."
fi

REPO_TITLE=booking-system
REPO_DIR="$INSTALL_DIR/$REPO_TITLE/"

GitCloneRepo(){
    cd $INSTALL_DIR
    echo "Cloning repo"
    if ! (git clone -b develop git@github.com:katzda/$REPO_TITLE.git);
    then
        if [ -d "$REPO_DIR" ] ; then sudo rm -rf $REPO_DIR; fi
        echo "Cloning failed!"
        return 1
    else
        echo "Cloning successful!"
        return 0
    fi
}

GitRepoExists(){
    if [[ $FRESH = true ]]; then
        echo "Removing the whole $REPO_DIR directory."
        sudo rm -rf $REPO_DIR;
    fi;
    if [[ -d $REPO_DIR ]] && [[ -d $REPO_DIR/.git ]]; then return 0; else return 1; fi
}

CreateBookingsContainer(){
    #setup the repo
    echo "Creating katzda/bookings:latest container"
    docker run \
        -v $REPO_DIR:/var/www/booking-system \
        --name bookings \
        -p 80:80 \
        --rm \
        -it \
        -e DB_NAME=$DB_NAME \
        -e DB_CONTAINER_NAME=$DB_CONTAINER_NAME \
        -e DB_USER_NAME=$DB_USER_NAME \
        -e DB_USER_PASSWORD=$DB_USER_PASSWORD \
        -e DB_PORT=$DB_PORT \
        -e FRESH=$FRESH \
        --network=bookingsnet \
        katzda/bookings:latest
}

#Git repo directory
if ! GitRepoExists; then
    if ! GitCloneRepo ;
    then
        echo "Did you register this PUBLIC KEY in your repo?"
        cat ~/.ssh/$SSH_KEY_TITLE.pub
        echo "Something's wrong with SSH communication, exiting."
        exit
    else
        CreateBookingsContainer
    fi
else
    echo "Repo is already cloned"
    CreateBookingsContainer
fi